// <auto-generated />
using System;
using BizfreeApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BizfreeApp.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250626094807_AddColumnsinCompanyUser")]
    partial class AddColumnsinCompanyUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BizfreeApp.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ClientAddress")
                        .HasColumnType("text")
                        .HasColumnName("client_address");

                    b.Property<string>("ClientEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_email");

                    b.Property<string>("ClientName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("client_phone");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsMultiple")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_multiple");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ClientId")
                        .HasName("client_pkey");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("client");
                });

            modelBuilder.Entity("BizfreeApp.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<int?>("AdminUserId")
                        .HasColumnType("integer")
                        .HasColumnName("admin_user_id");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("text")
                        .HasColumnName("company_address");

                    b.Property<string>("CompanyEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("company_email");

                    b.Property<string>("CompanyLogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("company_logo_url");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("company_name");

                    b.Property<long?>("CompanyPhone")
                        .HasColumnType("bigint")
                        .HasColumnName("company_phone");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("company_url");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("PackageId")
                        .HasColumnType("integer")
                        .HasColumnName("package_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("CompanyId")
                        .HasName("companies_pkey");

                    b.HasIndex("PackageId");

                    b.HasIndex(new[] { "CompanyEmail" }, "companies_company_email_key")
                        .IsUnique();

                    b.ToTable("companies");
                });

            modelBuilder.Entity("BizfreeApp.Models.CompanyModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("EnabledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enabled_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("company_modules_pkey");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("company_modules");
                });

            modelBuilder.Entity("BizfreeApp.Models.CompanyUser", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address_line1");

                    b.Property<DateOnly?>("AnniversaryDate")
                        .HasColumnType("date")
                        .HasColumnName("anniversary_date");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("blood_group");

                    b.Property<int?>("CheckAdmin")
                        .HasColumnType("integer")
                        .HasColumnName("check_admin");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("emergency_contact_name");

                    b.Property<string>("EmergencyContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("emergency_contact_number");

                    b.Property<string>("EmergencyContactRelation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("emergency_contact_relation");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("employee_code");

                    b.Property<string>("EmploymentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("employment_type");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly?>("JoiningDate")
                        .HasColumnType("date")
                        .HasColumnName("joining_date");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("marital_status");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_no");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_photo_url");

                    b.Property<int?>("ReportToUserId")
                        .HasColumnType("integer")
                        .HasColumnName("report_to_user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("EmployeeId")
                        .HasName("company_users_pkey");

                    b.HasIndex("CheckAdmin");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ReportToUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "EmployeeCode" }, "company_users_employee_code_key")
                        .IsUnique();

                    b.ToTable("company_users", (string)null);
                });

            modelBuilder.Entity("BizfreeApp.Models.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dept_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeptId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("department_name");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("DeptId")
                        .HasName("department_pkey");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("department");
                });

            modelBuilder.Entity("BizfreeApp.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("ModuleName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("module_name");

                    b.HasKey("ModuleId")
                        .HasName("modules_pkey");

                    b.ToTable("modules");
                });

            modelBuilder.Entity("BizfreeApp.Models.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("package_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PackageId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("package_name");

                    b.Property<decimal?>("PriceMonthly")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price_monthly");

                    b.Property<decimal?>("PriceYearly")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price_yearly");

                    b.Property<int?>("TrialDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("trial_days");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("PackageId")
                        .HasName("packages_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("packages");
                });

            modelBuilder.Entity("BizfreeApp.Models.Packagemodule", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("integer")
                        .HasColumnName("package_id");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<string>("PackageName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("package_name");

                    b.HasKey("PackageId", "ModuleId")
                        .HasName("packagemodule_pkey");

                    b.HasIndex("ModuleId");

                    b.ToTable("packagemodule");
                });

            modelBuilder.Entity("BizfreeApp.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionId"));

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("permission_name");

                    b.HasKey("PermissionId")
                        .HasName("permissions_pkey");

                    b.HasIndex("ModuleId");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("BizfreeApp.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("ProjectId")
                        .HasName("projects_pkey");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("BizfreeApp.Models.ProjectDocument", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("document_name");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document_type");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("integer")
                        .HasColumnName("uploaded_by");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("version");

                    b.HasKey("DocumentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("project_documents");
                });

            modelBuilder.Entity("BizfreeApp.Models.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddedBy")
                        .HasColumnType("integer")
                        .HasColumnName("added_by");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly?>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("project_members_pkey");

                    b.HasIndex("AddedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("project_members");
                });

            modelBuilder.Entity("BizfreeApp.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<int>("CheckAdmin")
                        .HasColumnType("integer")
                        .HasColumnName("check_admin");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("RoleId")
                        .HasName("roles_pkey");

                    b.HasIndex("CompanyId");

                    b.HasIndex(new[] { "CheckAdmin" }, "uq_roles_check_admin")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("BizfreeApp.Models.Rolespermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("rolespermissions_pkey");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("rolespermissions");
                });

            modelBuilder.Entity("BizfreeApp.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<decimal?>("ActualHours")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("actual_hours");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_to");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("DailyLog")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("daily_log");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<decimal?>("EstimatedHours")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("estimated_hours");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_task_id");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("integer")
                        .HasColumnName("priority_id");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("TaskListId")
                        .HasColumnType("integer")
                        .HasColumnName("task_list_id");

                    b.Property<int?>("TaskOrder")
                        .HasColumnType("integer")
                        .HasColumnName("task_order");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("TaskId")
                        .HasName("tasks_pkey");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("TaskListId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("BizfreeApp.Models.TaskDocument", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("document_name");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document_type");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("integer")
                        .HasColumnName("uploaded_by");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("version");

                    b.HasKey("DocumentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("task_documents");
                });

            modelBuilder.Entity("BizfreeApp.Models.TaskList", b =>
                {
                    b.Property<int>("TaskListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_list_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskListId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("list_name");

                    b.Property<int?>("ListOrder")
                        .HasColumnType("integer")
                        .HasColumnName("list_order");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("TaskListId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("task_lists", (string)null);
                });

            modelBuilder.Entity("BizfreeApp.Models.TaskTimelog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DurationMins")
                        .HasColumnType("integer")
                        .HasColumnName("duration_mins");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("task_timelogs_pkey");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("task_timelogs");
                });

            modelBuilder.Entity("BizfreeApp.Models.Taskattachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("uploaded_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("integer")
                        .HasColumnName("uploaded_by");

                    b.HasKey("Id")
                        .HasName("taskattachment_pkey");

                    b.HasIndex("TaskId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("taskattachment");
                });

            modelBuilder.Entity("BizfreeApp.Models.Taskcomment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_comment_id");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("taskcomment_pkey");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("taskcomment");
                });

            modelBuilder.Entity("BizfreeApp.Models.Taskpriority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("priority_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PriorityId"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PriorityColor")
                        .HasColumnType("text")
                        .HasColumnName("priority_color");

                    b.HasKey("PriorityId")
                        .HasName("taskpriorities_pkey");

                    b.ToTable("taskpriorities");
                });

            modelBuilder.Entity("BizfreeApp.Models.Taskstatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("StatusColor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status_color");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("StatusId")
                        .HasName("taskstatus_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("taskstatus");
                });

            modelBuilder.Entity("BizfreeApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BizfreeApp.Models.Client", b =>
                {
                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("Clients")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_company");

                    b.HasOne("BizfreeApp.Models.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BizfreeApp.Models.Company", b =>
                {
                    b.HasOne("BizfreeApp.Models.Package", "Package")
                        .WithMany("Companies")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("fk_package");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("BizfreeApp.Models.CompanyModule", b =>
                {
                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("CompanyModules")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_company");

                    b.HasOne("BizfreeApp.Models.Module", "Module")
                        .WithMany("CompanyModules")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("fk_module");

                    b.HasOne("BizfreeApp.Models.User", "UpdatedByNavigation")
                        .WithMany("CompanyModules")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_updated_by");

                    b.Navigation("Company");

                    b.Navigation("Module");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("BizfreeApp.Models.CompanyUser", b =>
                {
                    b.HasOne("BizfreeApp.Models.Role", "CheckAdminNavigation")
                        .WithMany("CompanyUserCheckAdminNavigations")
                        .HasForeignKey("CheckAdmin")
                        .HasPrincipalKey("CheckAdmin")
                        .HasConstraintName("fk_check_admin");

                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BizfreeApp.Models.User", "CreatedByNavigation")
                        .WithMany("CompanyUserCreatedByNavigations")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("BizfreeApp.Models.Department", "Department")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("BizfreeApp.Models.CompanyUser", "ReportToUser")
                        .WithMany("InverseReportToUser")
                        .HasForeignKey("ReportToUserId")
                        .HasConstraintName("fk_report_to_user");

                    b.HasOne("BizfreeApp.Models.Role", "Role")
                        .WithMany("CompanyUserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_role");

                    b.HasOne("BizfreeApp.Models.User", "UpdatedByNavigation")
                        .WithMany("CompanyUserUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("BizfreeApp.Models.User", "User")
                        .WithMany("CompanyUserUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckAdminNavigation");

                    b.Navigation("Company");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Department");

                    b.Navigation("ReportToUser");

                    b.Navigation("Role");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BizfreeApp.Models.Department", b =>
                {
                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_company");

                    b.HasOne("BizfreeApp.Models.User", "CreatedByNavigation")
                        .WithMany("DepartmentCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_created_by");

                    b.HasOne("BizfreeApp.Models.User", "UpdatedByNavigation")
                        .WithMany("DepartmentUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_updated_by");

                    b.Navigation("Company");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("BizfreeApp.Models.Package", b =>
                {
                    b.HasOne("BizfreeApp.Models.User", "CreatedByNavigation")
                        .WithMany("PackageCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_created_by");

                    b.HasOne("BizfreeApp.Models.User", "UpdatedByNavigation")
                        .WithMany("PackageUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_updated_by");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("BizfreeApp.Models.Packagemodule", b =>
                {
                    b.HasOne("BizfreeApp.Models.Module", "Module")
                        .WithMany("Packagemodules")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("fk_module");

                    b.HasOne("BizfreeApp.Models.Package", "Package")
                        .WithMany("Packagemodules")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("fk_package");

                    b.Navigation("Module");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("BizfreeApp.Models.Permission", b =>
                {
                    b.HasOne("BizfreeApp.Models.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .IsRequired()
                        .HasConstraintName("fk_module");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("BizfreeApp.Models.Project", b =>
                {
                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_company");

                    b.HasOne("BizfreeApp.Models.User", "CreatedByNavigation")
                        .WithMany("ProjectCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_created_by");

                    b.HasOne("BizfreeApp.Models.Taskstatus", "StatusNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_project_status_id");

                    b.HasOne("BizfreeApp.Models.User", "UpdatedByNavigation")
                        .WithMany("ProjectUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("fk_updated_by");

                    b.Navigation("Company");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("StatusNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("BizfreeApp.Models.ProjectDocument", b =>
                {
                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("ProjectDocuments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BizfreeApp.Models.Project", "Project")
                        .WithMany("ProjectDocuments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BizfreeApp.Models.User", "UploadedByUser")
                        .WithMany("ProjectDocuments")
                        .HasForeignKey("UploadedBy");

                    b.Navigation("Company");

                    b.Navigation("Project");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("BizfreeApp.Models.ProjectMember", b =>
                {
                    b.HasOne("BizfreeApp.Models.User", "AddedByNavigation")
                        .WithMany("ProjectMemberAddedByNavigations")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("fk_added_by");

                    b.HasOne("BizfreeApp.Models.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("fk_project");

                    b.HasOne("BizfreeApp.Models.User", "User")
                        .WithMany("ProjectMemberUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user");

                    b.Navigation("AddedByNavigation");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BizfreeApp.Models.Role", b =>
                {
                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BizfreeApp.Models.Rolespermission", b =>
                {
                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("Rolespermissions")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("fk_company");

                    b.HasOne("BizfreeApp.Models.Permission", "Permission")
                        .WithMany("Rolespermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("fk_permission");

                    b.HasOne("BizfreeApp.Models.Role", "Role")
                        .WithMany("Rolespermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_role");

                    b.Navigation("Company");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BizfreeApp.Models.Task", b =>
                {
                    b.HasOne("BizfreeApp.Models.User", "AssignedToNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("tasks_assigned_to_fkey");

                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("Tasks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("tasks_company_id_fkey");

                    b.HasOne("BizfreeApp.Models.User", "CreatedByUser")
                        .WithMany("TasksCreated")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("BizfreeApp.Models.Task", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_task_parent_task_id");

                    b.HasOne("BizfreeApp.Models.Taskpriority", "Priority")
                        .WithMany("Tasks")
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("tasks_priority_id_fkey");

                    b.HasOne("BizfreeApp.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("tasks_project_id_fkey");

                    b.HasOne("BizfreeApp.Models.Taskstatus", "StatusNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("Status")
                        .HasConstraintName("tasks_status_fkey");

                    b.HasOne("BizfreeApp.Models.TaskList", "TaskList")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskListId");

                    b.HasOne("BizfreeApp.Models.User", "UpdatedByUser")
                        .WithMany("TasksUpdated")
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Company");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ParentTask");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("StatusNavigation");

                    b.Navigation("TaskList");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("BizfreeApp.Models.TaskDocument", b =>
                {
                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("TaskDocuments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BizfreeApp.Models.Task", "Task")
                        .WithMany("TaskDocuments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BizfreeApp.Models.User", "UploadedByUser")
                        .WithMany("TaskDocuments")
                        .HasForeignKey("UploadedBy");

                    b.Navigation("Company");

                    b.Navigation("Task");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("BizfreeApp.Models.TaskList", b =>
                {
                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BizfreeApp.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("BizfreeApp.Models.Project", "Project")
                        .WithMany("TaskLists")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BizfreeApp.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Company");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Project");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("BizfreeApp.Models.TaskTimelog", b =>
                {
                    b.HasOne("BizfreeApp.Models.Task", "Task")
                        .WithMany("TaskTimelogs")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("task_timelogs_task_id_fkey");

                    b.HasOne("BizfreeApp.Models.User", "User")
                        .WithMany("TaskTimelogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("task_timelogs_user_id_fkey");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BizfreeApp.Models.Taskattachment", b =>
                {
                    b.HasOne("BizfreeApp.Models.Task", "Task")
                        .WithMany("Taskattachments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("taskattachment_task_id_fkey");

                    b.HasOne("BizfreeApp.Models.User", "UploadedByNavigation")
                        .WithMany("Taskattachments")
                        .HasForeignKey("UploadedBy")
                        .HasConstraintName("taskattachment_uploaded_by_fkey");

                    b.Navigation("Task");

                    b.Navigation("UploadedByNavigation");
                });

            modelBuilder.Entity("BizfreeApp.Models.Taskcomment", b =>
                {
                    b.HasOne("BizfreeApp.Models.Taskcomment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("taskcomment_parent_comment_id_fkey");

                    b.HasOne("BizfreeApp.Models.Task", "Task")
                        .WithMany("Taskcomments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("taskcomment_task_id_fkey");

                    b.HasOne("BizfreeApp.Models.User", "User")
                        .WithMany("Taskcomments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("taskcomment_user_id_fkey");

                    b.Navigation("ParentComment");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BizfreeApp.Models.Taskstatus", b =>
                {
                    b.HasOne("BizfreeApp.Models.User", "CreatedByNavigation")
                        .WithMany("TaskstatusCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("taskstatus_created_by_fkey");

                    b.HasOne("BizfreeApp.Models.User", "UpdatedByNavigation")
                        .WithMany("TaskstatusUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("taskstatus_updated_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("BizfreeApp.Models.User", b =>
                {
                    b.HasOne("BizfreeApp.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_company");

                    b.HasOne("BizfreeApp.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role");

                    b.Navigation("Company");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BizfreeApp.Models.Company", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("CompanyModules");

                    b.Navigation("CompanyUsers");

                    b.Navigation("Departments");

                    b.Navigation("ProjectDocuments");

                    b.Navigation("Projects");

                    b.Navigation("Roles");

                    b.Navigation("Rolespermissions");

                    b.Navigation("TaskDocuments");

                    b.Navigation("Tasks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BizfreeApp.Models.CompanyUser", b =>
                {
                    b.Navigation("InverseReportToUser");
                });

            modelBuilder.Entity("BizfreeApp.Models.Department", b =>
                {
                    b.Navigation("CompanyUsers");
                });

            modelBuilder.Entity("BizfreeApp.Models.Module", b =>
                {
                    b.Navigation("CompanyModules");

                    b.Navigation("Packagemodules");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("BizfreeApp.Models.Package", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Packagemodules");
                });

            modelBuilder.Entity("BizfreeApp.Models.Permission", b =>
                {
                    b.Navigation("Rolespermissions");
                });

            modelBuilder.Entity("BizfreeApp.Models.Project", b =>
                {
                    b.Navigation("ProjectDocuments");

                    b.Navigation("ProjectMembers");

                    b.Navigation("TaskLists");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BizfreeApp.Models.Role", b =>
                {
                    b.Navigation("CompanyUserCheckAdminNavigations");

                    b.Navigation("CompanyUserRoles");

                    b.Navigation("Rolespermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BizfreeApp.Models.Task", b =>
                {
                    b.Navigation("SubTasks");

                    b.Navigation("TaskDocuments");

                    b.Navigation("TaskTimelogs");

                    b.Navigation("Taskattachments");

                    b.Navigation("Taskcomments");
                });

            modelBuilder.Entity("BizfreeApp.Models.TaskList", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BizfreeApp.Models.Taskcomment", b =>
                {
                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("BizfreeApp.Models.Taskpriority", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BizfreeApp.Models.Taskstatus", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("BizfreeApp.Models.User", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("CompanyModules");

                    b.Navigation("CompanyUserCreatedByNavigations");

                    b.Navigation("CompanyUserUpdatedByNavigations");

                    b.Navigation("CompanyUserUsers");

                    b.Navigation("DepartmentCreatedByNavigations");

                    b.Navigation("DepartmentUpdatedByNavigations");

                    b.Navigation("PackageCreatedByNavigations");

                    b.Navigation("PackageUpdatedByNavigations");

                    b.Navigation("ProjectCreatedByNavigations");

                    b.Navigation("ProjectDocuments");

                    b.Navigation("ProjectMemberAddedByNavigations");

                    b.Navigation("ProjectMemberUsers");

                    b.Navigation("ProjectUpdatedByNavigations");

                    b.Navigation("TaskDocuments");

                    b.Navigation("TaskTimelogs");

                    b.Navigation("Taskattachments");

                    b.Navigation("Taskcomments");

                    b.Navigation("Tasks");

                    b.Navigation("TasksCreated");

                    b.Navigation("TasksUpdated");

                    b.Navigation("TaskstatusCreatedByNavigations");

                    b.Navigation("TaskstatusUpdatedByNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
